#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectTracker.DalLinq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PTracker")]
	public partial class PTrackerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAssignment(Assignment instance);
    partial void UpdateAssignment(Assignment instance);
    partial void DeleteAssignment(Assignment instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertResource(Resource instance);
    partial void UpdateResource(Resource instance);
    partial void DeleteResource(Resource instance);
    #endregion
		
		public PTrackerDataContext() : 
				base(global::ProjectTracker.DalLinq.Properties.Settings.Default.PTrackerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PTrackerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PTrackerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PTrackerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PTrackerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Assignment> Assignments
		{
			get
			{
				return this.GetTable<Assignment>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Resource> Resources
		{
			get
			{
				return this.GetTable<Resource>();
			}
		}
		
		[Function(Name="dbo.addAssignment")]
		public int addAssignment([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> projectId, [Parameter(DbType="Int")] System.Nullable<int> resourceId, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> assigned, [Parameter(DbType="Int")] System.Nullable<int> role, [Parameter(DbType="Timestamp")] ref System.Data.Linq.Binary newLastChanged)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), projectId, resourceId, assigned, role, newLastChanged);
			newLastChanged = ((System.Data.Linq.Binary)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.updateRole")]
		public int updateRole([Parameter(DbType="Int")] System.Nullable<int> id, [Parameter(DbType="VarChar(50)")] string name, [Parameter(DbType="Timestamp")] System.Data.Linq.Binary lastChanged, [Parameter(DbType="Timestamp")] ref System.Data.Linq.Binary newLastChanged)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, lastChanged, newLastChanged);
			newLastChanged = ((System.Data.Linq.Binary)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.addProject")]
		public int addProject([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(DbType="VarChar(50)")] string name, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> started, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> ended, [Parameter(DbType="VarChar(MAX)")] string description, [Parameter(DbType="Timestamp")] ref System.Data.Linq.Binary newLastChanged)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, started, ended, description, newLastChanged);
			newLastChanged = ((System.Data.Linq.Binary)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.addResource")]
		public int addResource([Parameter(DbType="VarChar(50)")] string lastName, [Parameter(DbType="VarChar(50)")] string firstName, [Parameter(DbType="Int")] ref System.Nullable<int> newId, [Parameter(DbType="Timestamp")] ref System.Data.Linq.Binary newLastChanged)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), lastName, firstName, newId, newLastChanged);
			newId = ((System.Nullable<int>)(result.GetParameterValue(2)));
			newLastChanged = ((System.Data.Linq.Binary)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.addRole")]
		public int addRole([Parameter(DbType="Int")] System.Nullable<int> id, [Parameter(DbType="VarChar(50)")] string name, [Parameter(DbType="Timestamp")] ref System.Data.Linq.Binary newLastChanged)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, newLastChanged);
			newLastChanged = ((System.Data.Linq.Binary)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.deleteAssignment")]
		public int deleteAssignment([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> projectId, [Parameter(DbType="Int")] System.Nullable<int> resourceId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), projectId, resourceId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.deleteProject")]
		public int deleteProject([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.deleteResource")]
		public int deleteResource([Parameter(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.deleteRole")]
		public int deleteRole([Parameter(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.existsProject")]
		public ISingleResult<existsProjectResult> existsProject([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<existsProjectResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.existsResource")]
		public ISingleResult<existsResourceResult> existsResource([Parameter(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<existsResourceResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.getProject")]
		public ISingleResult<getProjectResult> getProject([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<getProjectResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.getProjects")]
		public ISingleResult<getProjectsResult> getProjects()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<getProjectsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.getResource")]
		public ISingleResult<getResourceResult> getResource([Parameter(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<getResourceResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.getResources")]
		public ISingleResult<getResourcesResult> getResources()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<getResourcesResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.getRoles")]
		public ISingleResult<getRolesResult> getRoles()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<getRolesResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.updateAssignment")]
		public int updateAssignment([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> projectId, [Parameter(DbType="Int")] System.Nullable<int> resourceId, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> assigned, [Parameter(DbType="Int")] System.Nullable<int> role, [Parameter(DbType="Timestamp")] System.Data.Linq.Binary lastChanged, [Parameter(DbType="Timestamp")] ref System.Data.Linq.Binary newLastChanged)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), projectId, resourceId, assigned, role, lastChanged, newLastChanged);
			newLastChanged = ((System.Data.Linq.Binary)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.updateProject")]
		public int updateProject([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(DbType="VarChar(50)")] string name, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> started, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> ended, [Parameter(DbType="VarChar(MAX)")] string description, [Parameter(DbType="Timestamp")] System.Data.Linq.Binary lastChanged, [Parameter(DbType="Timestamp")] ref System.Data.Linq.Binary newLastChanged)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, started, ended, description, lastChanged, newLastChanged);
			newLastChanged = ((System.Data.Linq.Binary)(result.GetParameterValue(6)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.updateResource")]
		public int updateResource([Parameter(DbType="Int")] System.Nullable<int> id, [Parameter(DbType="VarChar(50)")] string lastName, [Parameter(DbType="VarChar(50)")] string firstName, [Parameter(DbType="Timestamp")] System.Data.Linq.Binary lastChanged, [Parameter(DbType="Timestamp")] ref System.Data.Linq.Binary newLastChanged)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, lastName, firstName, lastChanged, newLastChanged);
			newLastChanged = ((System.Data.Linq.Binary)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Assignments")]
	public partial class Assignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProjectId;
		
		private int _ResourceId;
		
		private System.DateTime _Assigned;
		
		private int _Role;
		
		private System.Data.Linq.Binary _LastChanged;
		
		private EntityRef<Role> _Role1;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIdChanging(System.Guid value);
    partial void OnProjectIdChanged();
    partial void OnResourceIdChanging(int value);
    partial void OnResourceIdChanged();
    partial void OnAssignedChanging(System.DateTime value);
    partial void OnAssignedChanged();
    partial void OnRoleChanging(int value);
    partial void OnRoleChanged();
    partial void OnLastChangedChanging(System.Data.Linq.Binary value);
    partial void OnLastChangedChanged();
    #endregion
		
		public Assignment()
		{
			this._Role1 = default(EntityRef<Role>);
			this._Project = default(EntityRef<Project>);
			this._Resource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[Column(Storage="_ProjectId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[Column(Storage="_ResourceId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[Column(Storage="_Assigned", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Assigned
		{
			get
			{
				return this._Assigned;
			}
			set
			{
				if ((this._Assigned != value))
				{
					this.OnAssignedChanging(value);
					this.SendPropertyChanging();
					this._Assigned = value;
					this.SendPropertyChanged("Assigned");
					this.OnAssignedChanged();
				}
			}
		}
		
		[Column(Storage="_Role", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					if (this._Role1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[Column(Storage="_LastChanged", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastChanged
		{
			get
			{
				return this._LastChanged;
			}
			set
			{
				if ((this._LastChanged != value))
				{
					this.OnLastChangedChanging(value);
					this.SendPropertyChanging();
					this._LastChanged = value;
					this.SendPropertyChanged("LastChanged");
					this.OnLastChangedChanged();
				}
			}
		}
		
		[Association(Name="Role_Assignment", Storage="_Role1", ThisKey="Role", OtherKey="Id", IsForeignKey=true)]
		public Role Role1
		{
			get
			{
				return this._Role1.Entity;
			}
			set
			{
				Role previousValue = this._Role1.Entity;
				if (((previousValue != value) 
							|| (this._Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role1.Entity = null;
						previousValue.Assignments.Remove(this);
					}
					this._Role1.Entity = value;
					if ((value != null))
					{
						value.Assignments.Add(this);
						this._Role = value.Id;
					}
					else
					{
						this._Role = default(int);
					}
					this.SendPropertyChanged("Role1");
				}
			}
		}
		
		[Association(Name="Project_Assignment", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Assignments.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Assignments.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(System.Guid);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[Association(Name="Resource_Assignment", Storage="_Resource", ThisKey="ResourceId", OtherKey="Id", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.Assignments.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.Assignments.Add(this);
						this._ResourceId = value.Id;
					}
					else
					{
						this._ResourceId = default(int);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Data.Linq.Binary _LastChanged;
		
		private EntitySet<Assignment> _Assignments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLastChangedChanging(System.Data.Linq.Binary value);
    partial void OnLastChangedChanged();
    #endregion
		
		public Role()
		{
			this._Assignments = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignments), new Action<Assignment>(this.detach_Assignments));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastChanged", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastChanged
		{
			get
			{
				return this._LastChanged;
			}
			set
			{
				if ((this._LastChanged != value))
				{
					this.OnLastChangedChanging(value);
					this.SendPropertyChanging();
					this._LastChanged = value;
					this.SendPropertyChanged("LastChanged");
					this.OnLastChangedChanged();
				}
			}
		}
		
		[Association(Name="Role_Assignment", Storage="_Assignments", ThisKey="Id", OtherKey="Role")]
		public EntitySet<Assignment> Assignments
		{
			get
			{
				return this._Assignments;
			}
			set
			{
				this._Assignments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = this;
		}
		
		private void detach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = null;
		}
	}
	
	[Table(Name="dbo.Projects")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Started;
		
		private System.Nullable<System.DateTime> _Ended;
		
		private string _Description;
		
		private System.Data.Linq.Binary _LastChanged;
		
		private EntitySet<Assignment> _Assignments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartedChanging(System.Nullable<System.DateTime> value);
    partial void OnStartedChanged();
    partial void OnEndedChanging(System.Nullable<System.DateTime> value);
    partial void OnEndedChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLastChangedChanging(System.Data.Linq.Binary value);
    partial void OnLastChangedChanged();
    #endregion
		
		public Project()
		{
			this._Assignments = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignments), new Action<Assignment>(this.detach_Assignments));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Started", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Started
		{
			get
			{
				return this._Started;
			}
			set
			{
				if ((this._Started != value))
				{
					this.OnStartedChanging(value);
					this.SendPropertyChanging();
					this._Started = value;
					this.SendPropertyChanged("Started");
					this.OnStartedChanged();
				}
			}
		}
		
		[Column(Storage="_Ended", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Ended
		{
			get
			{
				return this._Ended;
			}
			set
			{
				if ((this._Ended != value))
				{
					this.OnEndedChanging(value);
					this.SendPropertyChanging();
					this._Ended = value;
					this.SendPropertyChanged("Ended");
					this.OnEndedChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_LastChanged", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastChanged
		{
			get
			{
				return this._LastChanged;
			}
			set
			{
				if ((this._LastChanged != value))
				{
					this.OnLastChangedChanging(value);
					this.SendPropertyChanging();
					this._LastChanged = value;
					this.SendPropertyChanged("LastChanged");
					this.OnLastChangedChanged();
				}
			}
		}
		
		[Association(Name="Project_Assignment", Storage="_Assignments", ThisKey="Id", OtherKey="ProjectId")]
		public EntitySet<Assignment> Assignments
		{
			get
			{
				return this._Assignments;
			}
			set
			{
				this._Assignments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[Table(Name="dbo.Resources")]
	public partial class Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _LastName;
		
		private string _FirstName;
		
		private System.Data.Linq.Binary _LastChanged;
		
		private EntitySet<Assignment> _Assignments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastChangedChanging(System.Data.Linq.Binary value);
    partial void OnLastChangedChanged();
    #endregion
		
		public Resource()
		{
			this._Assignments = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignments), new Action<Assignment>(this.detach_Assignments));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastChanged", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastChanged
		{
			get
			{
				return this._LastChanged;
			}
			set
			{
				if ((this._LastChanged != value))
				{
					this.OnLastChangedChanging(value);
					this.SendPropertyChanging();
					this._LastChanged = value;
					this.SendPropertyChanged("LastChanged");
					this.OnLastChangedChanged();
				}
			}
		}
		
		[Association(Name="Resource_Assignment", Storage="_Assignments", ThisKey="Id", OtherKey="ResourceId")]
		public EntitySet<Assignment> Assignments
		{
			get
			{
				return this._Assignments;
			}
			set
			{
				this._Assignments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
	}
	
	public partial class existsProjectResult
	{
		
		private System.Nullable<int> _Column1;
		
		public existsProjectResult()
		{
		}
		
		[Column(Storage="_Column1", DbType="Int")]
		public System.Nullable<int> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class existsResourceResult
	{
		
		private System.Nullable<int> _Column1;
		
		public existsResourceResult()
		{
		}
		
		[Column(Storage="_Column1", DbType="Int")]
		public System.Nullable<int> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class getProjectResult
	{
		
		private System.Guid _Id;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Started;
		
		private System.Nullable<System.DateTime> _Ended;
		
		private string _Description;
		
		private System.Data.Linq.Binary _LastChanged;
		
		public getProjectResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Started", DbType="DateTime")]
		public System.Nullable<System.DateTime> Started
		{
			get
			{
				return this._Started;
			}
			set
			{
				if ((this._Started != value))
				{
					this._Started = value;
				}
			}
		}
		
		[Column(Storage="_Ended", DbType="DateTime")]
		public System.Nullable<System.DateTime> Ended
		{
			get
			{
				return this._Ended;
			}
			set
			{
				if ((this._Ended != value))
				{
					this._Ended = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_LastChanged", DbType="rowversion NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary LastChanged
		{
			get
			{
				return this._LastChanged;
			}
			set
			{
				if ((this._LastChanged != value))
				{
					this._LastChanged = value;
				}
			}
		}
	}
	
	public partial class getProjectsResult
	{
		
		private System.Guid _Id;
		
		private string _Name;
		
		public getProjectsResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class getResourceResult
	{
		
		private int _Id;
		
		private string _LastName;
		
		private string _FirstName;
		
		private System.Data.Linq.Binary _LastChanged;
		
		public getResourceResult()
		{
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_LastChanged", DbType="rowversion NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary LastChanged
		{
			get
			{
				return this._LastChanged;
			}
			set
			{
				if ((this._LastChanged != value))
				{
					this._LastChanged = value;
				}
			}
		}
	}
	
	public partial class getResourcesResult
	{
		
		private int _Id;
		
		private string _LastName;
		
		private string _FirstName;
		
		public getResourcesResult()
		{
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
	}
	
	public partial class getRolesResult
	{
		
		private int _Id;
		
		private string _Name;
		
		private System.Data.Linq.Binary _LastChanged;
		
		public getRolesResult()
		{
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_LastChanged", DbType="rowversion NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary LastChanged
		{
			get
			{
				return this._LastChanged;
			}
			set
			{
				if ((this._LastChanged != value))
				{
					this._LastChanged = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
